#include<bits/stdc++.h>
#define int int64_t
using namespace std;
const int MOD = 10e9 + 7;
int sempai = 0;
void xoring(vector<int> b){
    for(int i = 0; i < b.size() ; i++){
        sempai ^= b[i];
    }
}
void generator(){
    int n;
    cin >> n;
    vector<int>vec(n);
    for(int i = 0; i < n ; i ++){
        cin >> vec[i];
    }
    int p = sqrt(n);
    if(p * p == n){
        vec.push_back(0);
    }
    vector<int>b;         
    thread maski[p + 1];
    for(int i = 0 ; i < p ; i++){
        for(int j = 0; j < p; j++){
            b.push_back(vec[vec.size() - 1]);
            vec.pop_back();
        }   
        maski[i] = thread(xoring , b);
        b.clear();
    }
    for(int i = 0; i < vec.size() ; i++){
        b.push_back(vec[i]);
    }
    maski[p] = thread(xoring , b);
    b.clear();
    for(int i = 0; i < p + 1 ; i++){
        maski[i].join();
    }
    cout << sempai;
}
signed main(){
    generator();
}


//Заметим , что ассимптотика нашего решения это максимум от количества потоков(B) , 
которые используются и максимального количества чисел в потоке (A). 
Мы хотим минимизировать эти 2 величины одновременно , тогда максимально , 
чего мы можем добиться при грамотном выборе A,B это A * B = O(n) , так как по определению A * B >= n. 
Тогда нужно взять их по sqrt(n). Тогда наша наилучшая итоговая ассимптотика решения sqrt(n). 
Но в своей программе я пишу неидеальный код , так как у меня P массивов по P элементов , 
где P = sqrt(n) , то последний я заполняю не болeе чем (P+1)*(P+1) - P*P = 2P + 1 элементами , 
то есть ассимптотика моего решения равна 2 * sqrt(n). (2 считается значимой константой) 



Test 1
15
1 2 3 4 5 6 7 8 10 12 14 16 18 20 30

Answer 1 
8



Test 2
1
1 

Answer 2 
1



Test 3
2
1 3

Answer 3 
2



Test 4
57
12 3 4 25 346 6 4 1 3 2 31 4 235 5 45 3 6 4 1 34 1 34 23 5 3 6 3 43 123 123 3 4 3 6 7 67 7 7 767 5 755 4 457 56 786 78979 879 6 5 4 6 67 872 31 4 5 36

Answer 4
79864



Test 5
79
45 67 323 357 98 70 3 5 6 12 3 7 12 35 47 69 97 67 89 40 30 26 5 7 29 876 925 6349 32 4 5 36 6 3 4 1
4 6 8 9 8 2 42 34 36 4678 7 5 234 235 57 58 809 80 546 34 213 4 346 47 8 78 56 23 4 21 23 3 56 7 568 67 678 67 45 5 6 64 5 

Answer 5
2632
